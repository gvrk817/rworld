y <- i>= 10 && i<=20
i[y]
}
}
return i[y]
function1 <- function(x){
for (i in x) {
y <- i>= 10 && i<=20
print(i)
i[y]
}
}
x <- 1:20
function1(x)
function1 <- function(x){
for (i in x) {
y <- if(i>= 10 && i<=20){
print(i)
}
i[y]
}
}
x <- 1:20
function1(x)
function1 <- function(x){
for (i in x) {
y <- if(i>= 10 && i<=20){
print(i)
i[y]
}
}
}
x <- 1:20
function1(x)
y <- c()
function1 <- function(x){
for (i in 1: lenght(x)) {
y[i] <- if(x[i]>= 10 && x[i]<=20){
print(x[i])
x[i]
}
}
}
x <- 1:20
function1(x)
y <- c()
function1 <- function(x){
for (i in 1: length(x)) {
y[i] <- if(x[i]>= 10 && x[i]<=20){
print(x[i])
x[i]
}
}
}
x <- 1:20
function1(x)
y
function3 <- function(x){
use <- x[i]>= 10 | x[i]<=20
x[use]
}
x <- 1:20
function3(x)
function3 <- function(x){
use <- x>= 10 | x<=20
x[use]
}
x <- 1:20
function3(x)
function3 <- function(x){
use <- x>= 10 & x<=20
x[use]
}
x <- 1:20
function3(x)
argFunction <- function(model = TRUE, x = 10, y = 2+3i, z = "R"){
}
argFunction(x=20,z="P")
argFunction <- function(model = TRUE, x = 10, y = 2+3i, z = "R"){
print(model)
print(x + y + z)
}
argFunction(x=20,z="P")
argFunction <- function(model = TRUE, x = 10, y = 2+3i, z = "R"){
print(model)
print(x + "" + y + "" + z)
}
argFunction(x=20,z="P")
argFunction <- function(model = TRUE, x = 10, y = 2+3i, z = "R"){
print(model)
print(z)
}
argFunction(x=20,z="P")
args(lm)
argFunction <- function(model123456 = TRUE, x = 10, y = 2+3i, z = "R"){
print(model)
print(z)
}
argFunction(model=FALSE,x=20,z="P")
argFunction(["model"]=FALSE,x=20,z="P")
argFunction($model=FALSE,x=20,z="P")
argFunction <- function(model = TRUE, x = 10, y = 2+3i, z = "R"){
print(model)
print(z)
}
argFunction(mo=FALSE,x=20,z="P")
swirl()
library'swirl'
library(swirl)
swirl()
5+7
x<-5_7
x<-5+7
x
y<-x-3
y
z <- c(1.1, 9, 3.14)
?c()
c()?
?c
info()
?c
z
c(z, 555)
c(z, 555, z)
z*2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
dir()
?list.files
args(list.files())
args()
args(list.files)
old.dir <- getwd()
dir.create(testdir)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info
file.info("mytest.R")
?file.rename
file.rename(mytest1.R,mytest2.R)
file.rename(mytest.R,mytest2.R)
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"))
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
getwd()
setwd(old.dir)
f1 <- function(x,y){
x^2+ y/z;
}
f1(2,4)
z <- 2
f1(2,4)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
getwd()
library("swirl")
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(1,20, by=0.5)
seq(0,10, by=0.5)
seq(5,10, length=30)
my_seq <- seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect>=6
my_char <- c("my", "name", "is")
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse=" ")
my_name <- c(my_char, "Ravi")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world", sep= " ")
paste("Hello", "world!", sep= " ")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y <- rnomr(1000)
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na, na.rm= TRUE)
sum(my_na)
my_data
0/0
Inf - Inf
library("swirl")
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
c(x[3],x[5],x[7])
x[c(3,5,7)]
x[0]
x[3000]
x[!c(2,10)]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
library("swirl")
swirl()
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
c(1:20)
my_matrix2 <- matrix(c(1:20), nrow=4, ncol=5, byrow=FALSE, dimnames=NULL)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
?cbind
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE)
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
! (5 == 7)
false & false
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5>8 || 6 !=8 && 4>3.9
isTrue(6>4)
isTRUE(6>4)
identical
identical('twins', 'twins')
xor(5 == 6)
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(c(ints>7))
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function()
boring_function(x)
boring_function("Test")
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x <- c[1]}, c(8,4,0))
evaluate(function(x){x <- [1]}, c(8,4,0))
evaluate(function(x){[x(1)]}, c(8,4,0))
evaluate(function(x){x(1)}, c(8,4,0))
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
telegram("Good", "morning")
submit()
telegram("Good", "morning")
library("swirl")
swirl()
submit()
submit()
mad_libs("Atlanta", "furious", "stadium")
submit()
submit()
'Hello %p% student!'
submit()
submit()
submit()
submit()
submit()
submit()
"I %p% love R!"
"I %p% love %p% R!"
"I %p% love %p% R %p% !"
"I %p% love %p% R!"
"I love %p% R!"
info()
"I%p%love%p%R%p%!"
"I%p%love%p%R!"
'I' %p% 'love' %p% 'R' %p% '!'
'I' %p% 'love' %p% 'R!'
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
library("swirl")
swirl()
sum(flags$orange)
flags
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c()3,4,5,5,5,6,6)
unique(c()3,4,5,5,5,6,6))
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1960-01-01")
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2= as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time() - 1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
rnorm(10)
?rnorm
x <- list(a = rnorm(5), b = rnorm(10), c = rnorm(20,1), d= rnorm(100,5))
lapply(x, mean)
rnorm(20,1)
rnorm(20:25, 1:2)
?read.table
x <- 1:4
lapply(x, runif)
x
read.csv("/Users/gangineni/Documents/Projects/specdata/001.csv", header = TRUE, sep = ",", quote = "\"", dec = ".", fill = TRUE, comment.char = "", ...)
read.csv("/Users/gangineni/Documents/Projects/specdata/001.csv", header = TRUE, sep = ",", quote = "\"", dec = ".", fill = TRUE, comment.char = "")
library("swirl")
swirl()
getwd()
1:10
class(1:10)
length(1:10)
for{}
72:75
min(72:75, na.rm = FALSE)
max(72:75, na.rm = FALSE)
c(10)
length(c(10))
pollDataFrame <- read.csv("/Users/gangineni/Documents/Projects/specdata", header = TRUE, sep = ",", quote = "\"", dec = ".", fill = TRUE, comment.char = "")
read.csv("/Users/gangineni/Documents/Projects/specdata", header = TRUE, sep = ",", quote = "\"", dec = ".", fill = TRUE, comment.char = "")
read.csv("/Users/gangineni/Documents/Projects/specdata/002.csv", header = TRUE, sep = ",", quote = "\"", dec = ".", fill = TRUE, comment.char = "")
read.csv("/Users/gangineni/Documents/Projects/specdata/002.csv", header = TRUE, sep = ",", quote = "\"", dec = ".", fill = TRUE, comment.char = "", na.rm = TRUE)
read.csv("/Users/gangineni/Documents/Projects/specdata/002.csv", header = TRUE, sep = ",", quote = "\"", dec = ".", fill = TRUE, comment.char = "")
samplDf <- read.csv("/Users/gangineni/Documents/Projects/specdata/002.csv", header = TRUE, sep = ",", quote = "\"", dec = ".", fill = TRUE, comment.char = "")
samplDf
na.omit(samplDf)
directory <- paste(getwd(),"/","specdata","/",sep="")
directory
ls(directory)
list.files(directory)
setwd
setwd("/Users/gangineni/Documents/Projects/specdata")
pollutantmean <- function(directory, pollutant, id = 1:332) {
# Get full path of the specsdata folder
directory <- paste(getwd(),"/",directory,"/",sep="")
# Aux variables
file_list <- list.files(directory)
data <- NA
#For each id passed as parameter:
for (i in id) {
#Read the file,
file_dir <- paste(directory,file_list[i],sep="")
file_data <- read.csv(file_dir)
# accumulate the data
data <- rbind(data,file_data)
print data
}
# Calculate the mean and return it
mean(data[[pollutant]],na.rm = TRUE)
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
# Get full path of the specsdata folder
directory <- paste(getwd(),"/",directory,"/",sep="")
# Aux variables
file_list <- list.files(directory)
data <- NA
#For each id passed as parameter:
for (i in id) {
#Read the file,
file_dir <- paste(directory,file_list[i],sep="")
file_data <- read.csv(file_dir)
# accumulate the data
data <- rbind(data,file_data)
data
}
# Calculate the mean and return it
mean(data[[pollutant]],na.rm = TRUE)
}
test1 <- pollutantmean("specdata","sulfate",id=1:10)
